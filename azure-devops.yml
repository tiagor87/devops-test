variables:
  major: 0
  group: $[join('-', [variables['Build.Reason'], contains(variables['Build.Reason'], 'feature')])]
  minor: $[counter(variables['group'], 0)]
  patch: $[counter(variables['Build.Reason'], 0)]
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    release: '$(rev:.r)'
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    release: '$(rev:.r)-beta'

trigger:
  batch: true
  branches:
    include:
      - 'master'
pr:
  autoCancel: false
  branches:
    include:
      - 'master'

stages:
  - stage:
    displayName: Versioning
    jobs:
      - job:
        displayName: Compute Version
        pool:
          vmImage: ubuntu-latest
          demands:
            - java
        steps:
          - task: Bash@3
            displayName: 'Update patch'
            inputs:
              targetType: 'inline'
              script: echo "##vso[build.updatebuildnumber]$(major).$(minor).$(patch)$(release)"
  - stage:
    displayName: Versioning
    jobs:
      - job:
        displayName: Compute Version
        pool:
          vmImage: ubuntu-latest
          demands:
            - java
        variables:
            Version_Patch: $[counter(variables['Build.Reason'], 1)]
        steps:
          - task: Bash@3
            displayName: 'Update version'
            inputs:
              targetType: 'inline'
              script: echo "##vso[build.updatebuildnumber]$(Version_Major).$(Version_Minor).$(Version_Patch)"
            condition: ne(variables['Build.Reason'], 'PullRequest')
  - stage:
    displayName: Build
    jobs:  
    - job:
      displayName: Build
      steps:
      - script: echo Hello, world 2!